
/*
 * Complete the function below.
 */
static String[] braces(String[] values) {
    String[] result = new String[values.length];
    
    for (int i = 0; i < values.length; i++) {
        Stack<Character> stack = new Stack<>();
        String curr = values[i];
        
        boolean check = true;

        for (int j = 0; j < curr.length(); j++) {
            char currChar = curr.charAt(j);
            if (currChar == '}') {
                if (!stack.isEmpty()) {
                    char match = stack.peek();
                    if (match != '{') {
                        result[i] = "NO";
                        break;
                    } else {
                        stack.pop();
                    }
                } else {
                    check = false;
                    result[i] = "NO";
                    break;
                }
            } else if (currChar == ']') {
                if (!stack.isEmpty()) {
                    char match = stack.peek();
                    if (match != '[') {
                        result[i] = "NO";
                        break;
                    } else {
                        stack.pop();
                    }
                } else {
                    check = false;
                    result[i] = "NO";
                    break;
                }
            } else if (currChar == ')') {
                if (!stack.isEmpty()) {
                    char match = stack.peek();
                    if (match != '(') {
                        result[i] = "NO";
                        break;
                    } else {
                        stack.pop();
                    }
                } else {
                    check = false;
                    result[i] = "NO";
                    break;
                }
            } else {
                stack.push(curr.charAt(j));
            }
        }
        if (check) {
            if (!stack.isEmpty()) {
                result[i] = "NO";
            } else {
                result[i] = "YES";
            }
        }
    }
    
    return result;
}


/*
 * Complete the function below.
 */
static int[] getMaxElementIndices(int[] a, int[] rotate) {
    int[] result = new int[rotate.length];
    
    int maxIndex = 0;
    int max = -1;
    for (int i = 0; i < a.length; i++) {
        if (a[i] > max) {
            max = a[i];
            maxIndex = i;
        }
    }
    
    for (int i = 0; i < rotate.length; i++) {
        int rotateAmount = rotate[i] % a.length;
        int cIndex = maxIndex - rotateAmount;
        if (cIndex < 0) {
            cIndex = a.length + cIndex;
        }
        result[i] = cIndex;
    }
    return result;
}


/*
 * Complete the function below.
 */
static int maximumGroups(int[] predators) {
    int maxPath = 0;        
    for (int i = 0; i < predators.length; i++) {
        int pathLen = 0;
        int curr = predators[i];
        while (curr >= 0) {
            curr = predators[curr];
            pathLen += 1;
        }
        maxPath = Math.max(pathLen, maxPath);
    }
    
    return maxPath + 1;
}

