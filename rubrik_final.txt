Rubrik Final Interviews
4 December 2017

1.
Given a 2D matrix of size NxN
Consists of elements {0, 1}
Consists of k^2 1s
k < N
Operation allowed (i1, j1) <-> (i2, j2)
Find minimum no. of swaps to get to a kxk submatrix consisting of all 1s

Ex: 
N = 4, k = 2

0 0 0 1
1 0 0 0
1 1 0 0
0 0 0 0

1 swap needed. (0, 3) <-> (1, 1)

0 0 1 1
0 0 1 1
0 0 0 0
0 0 0 0

0 0 0 0
1 1 0 0
1 1 0 0
0 0 0 0

Solution: How many possible submatrices are there? (n - k + 1)^2. For each, count the number of 1's we need to swap in. Make the count efficient by preprocessing each column of size k.

import java.io.*;
import java.util.*;
class Solution {
  public static void main(String[] args) {
    int[][] arr = new int[4][4];
    arr[0][3] = 1;
    arr[0][1] = 1;
    arr[0][2] = 1;
    arr[1][2] = 1;
    minSwaps(arr, 4 , 2);
  }
}

public static int minSwaps(int[][] board, int n, int k) {
  int minSwaps = Integer.MAX_VALUE;
  
  Map<Integer, Map<Integer, Integer>> rmap = new HashMap<Integer, HashMap<Integer, Integer>>();
  
//   Map<Integer, Map<Integer, Integer>> dmap = new HashMap<Integer, HashMap<Integer, Integer>>();
  
  for (int i = 0; i < n; i ++) {
    int total = 0;
    for (int j = 0; j < n - k + 1; j++ ){ 
      for (int kk = 0; kk < k; kk++) {
        total += board[i][j + kk];
      }
      Map<Integer, Integer> jMap = new HashMap<Integer, Integer>();
      jMap.put(j, total);
      rmap.put(i, jMap); 
   }
  }
//   for (int i = 0; i < n - k + 1; i ++) {
//     int total = 0;
//     for (int j = 0; j < k; j++ ){ 
//      total += board[j][i];
//    }
//     dmap.put(i, total); 
//   }
  
  for (int i = 0; i < n - k + 1; i++) {
    int currSum = 0;
    for (int kk = 0; kk < k; kk++){
      currSum += rMap.get(i).get(0);
    }
   for (int j = 0; j < n - k + 1; j++) {
     currSum -= rMap.get(i).get(j);
     currSum += rMap.get(i).get(j + k);
    //  for (int x = 0; x < k; x++) {
    //  for (int y = 0; y < k; y++) {
    //    if (board[i + x][j +y] == 1) {
    //     correct += 1; 
    //    }
    //  }
    // }
     int missing = k * k - currSum;
     minSwaps = Math.min(missing, minSwaps);
   }
  }
  return minSwaps;
}

2.
Implement a stack that supports the following operations as efficiently as possible:
    void push(int x)    // add a value to the stack
    int pop()           // remove a value from the stack
    int peekMin()       // return the minimum value in the stack

New goal: Keep same O(1) runtime for all three methods, but using only O(1) extra space (on top of the N elements in the regular stack).
Assume: All values stored in the stack are positive (>0).

Use negatives!!

pop:
  if (update current min):
    currentMin = ###
    return old minimum
  else:
    return ###

vals  min    stack
5     5      -1
2     2      5-
3     2      3
1     1      2-
4     1      4

5,1
2,2
1,3

Solution: First part use a second stack to keep track of the minimum value. Second part, use a variable to keep track of current minimum. Store the old minimum in places where the value of the minimum changes. Use negatives to distinguish.

import java.io.*;
import java.util.*;

class Solution {
  public static void main(String[] args) {
    // int[][] arr = new int[4][4];
    // arr[0][3] = 1;
    // arr[0][1] = 1;
    // arr[0][2] = 1;
    // arr[1][2] = 1;
    // minSwaps(arr, 4 , 2);
    
    MinStack stack = new MinStack();
    
    stack.push(5);
    System.out.println(stack.peekMin());
    stack.push(2);
    System.out.println(stack.peekMin());
    stack.push(3);
    System.out.println(stack.peekMin());
    stack.push(1);
    System.out.println(stack.peekMin());
    stack.push(4);
    System.out.println(stack.peekMin());
    System.out.println(stack.pop());
    System.out.println(stack.peekMin());
    System.out.println(stack.pop());
    System.out.println(stack.peekMin());
                       
  }
  public static class MinStack {
   public Stack<Integer> stack;
   public Stack<Pair> minStack;

   public MinStack() {
    stack = new Stack<Integer>();
    minStack = new Stack<Pair>();
   }

   public int peekMin() {
     return minStack.peek().value;
   }

   public int pop() {
    if (minStack.peek().occurences == 1) {
     minStack.pop(); 
    } else {
     minStack.peek().occurences -= 1; 
    }
    return stack.pop();
   }

   public void push(int val) {
     stack.push(val);
     if (minStack.isEmpty()) {
         minStack.push(new Pair(val, 1));
     } else {
       int currMin = minStack.peek().value;

       if (val >= currMin) {
         minStack.peek().occurences += 1;
       } else if (val < currMin) {
         minStack.push(new Pair(val, 1));
       }   
     }
      
   }
  }

  public static class Pair {
   public int value;
   public int occurences;

   public Pair(int value, int occurences) {
     this.value = value;
     this.occurences = occurences;
   }
  }
}

3.
Objective: Implement a function that takes in a list/array of n distinct integers and returns any local maximum that is present in the list.

2, 4, 6, 8, 10, 5, 13, 9, 8.5, 3, 1, 0
         *        *
Iterating through and directly checking condition: O(n)
Splitting approach: O(log(n))

Objective: Implement a function that takes in a 2D array of n x n distinct integers and returns any local maximum that is present in the input.
05, 19, 18
12, 01, 25
07, 110, 30

Solution: First part, split array in half, choose side with ascending values. Global max always exists.

import java.io.*;
import java.util.*;

class Solution {
  public static void main(String[] args) {
    int[] arr = new int[]{2,4,6,8,10,5,13,9,7,3,1,0};
    System.out.println(localMax(arr));
    arr = new int[]{2};

    System.out.println(localMax(arr));
    arr = new int[]{0,1,2,3,4};
    System.out.println(localMax(arr));
    
    arr = new int[]{5,4,3,2,1};
    System.out.println(localMax(arr));

    arr = new int[]{5,4,3,2,1,2,3,4,5};
    System.out.println(localMax(arr));

    
    arr = new int[]{1,2,3,4,5,4,3,2,1};
    System.out.println(localMax(arr));

    arr = new int[]{1,2,3};
    System.out.println(localMax(arr)); 
    arr = new int[]{3,2,1};
    System.out.println(localMax(arr)); 
  }
  
  public static int localMax(int[] arr) {
    return helper(arr, 0, arr.length);  
  }

  private static int helper(int[] arr, int start, int end) {
    if (start == end - 1) {
     return arr[start]; 
    }
    
    int mid = (end + start) / 2;  
    int midVal = arr[mid];
    
    if (mid != 1 && mid == end - 1) {
     return midVal; 
    }
    
    if (arr[mid - 1] < midVal && arr[mid + 1] < midVal) {
     return midVal; 
    } else if (arr[mid - 1] < midVal && midVal < arr[mid + 1]) {
     return helper(arr, mid, end); 
    } else if (arr[mid - 1] > midVal && midVal > arr[mid + 1]) {
     return helper(arr, start, mid);
    } else {
     return helper(arr, start, mid);
    }
  }
}